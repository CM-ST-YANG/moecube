// Generated by CoffeeScript 1.7.1
(function() {
  var Datastore, child_process, crypto, db, fs, gui, mkdirp, path;

  path = require('path');

  fs = require('fs');

  child_process = require('child_process');

  crypto = require('crypto');

  mkdirp = require('mkdirp');

  gui = require('nw.gui');

  Datastore = require('nw_nedb');

  db = new Datastore({
    filename: path.join(gui.App.dataPath, 'apps.db'),
    autoload: true
  });

  angular.module('maotama.controllers', []).controller('AppsListController', function($scope) {
    return db.find({}, (function(_this) {
      return function(err, docs) {
        if (err) {
          throw err;
        }
        $scope.apps = docs;
        return $scope.$digest();
      };
    })(this));
  }).controller('AppsShowController', [
    '$scope', '$routeParams', function($scope, $routeParams) {
      db.findOne({
        id: $routeParams.app_id
      }, function(err, doc) {
        var download, lang, _ref;
        if (err) {
          throw err;
        }
        $scope.app = doc;
        console.log($scope.app);
        $scope.app.default_installation_path = path.join(process.cwd(), 'apps', $scope.app.id);
        $scope.app.extra_languages = {};
        _ref = $scope.app.languages;
        for (lang in _ref) {
          download = _ref[lang];
          console.assert($scope.app.download.url);
          console.assert($scope.app.download.size);
          if (download !== true) {
            $scope.app.has_extra_languages = true;
            $scope.app.extra_languages[lang] = download;
          }
        }
        $scope.installing = {};
        return $scope.$digest();
      });
      $scope.add = function(installation) {
        $scope.app.installation = path.dirname(installation);
        return db.update({
          id: $scope.app.id
        }, {
          $set: {
            installation: $scope.app.installation
          }
        }, function(err, numReplaced, newDoc) {
          if (err) {
            throw err;
          }
          return $scope.$digest();
        });
      };
      $scope.install = function() {
        $scope.installing[$scope.app.id] = {
          process: 0,
          label: '正在连接'
        };
        return mkdirp(path.join(process.cwd(), 'cache'), function(err) {
          var aria2c;
          if (err) {
            throw err;
          }
          aria2c = child_process.spawn('bin/aria2c', ["--check-integrity", "--checksum=md5=" + $scope.app.download.checksum, "--dir=cache", "--enable-color=false", "-c", $scope.app.download.url]);
          aria2c.stdout.setEncoding('utf8');
          aria2c.stderr.setEncoding('utf8');
          aria2c.stdout.on('data', function(data) {
            var connections, d, downloaded, eta, matches, progress, speed, total;
            console.log(data);
            if (matches = data.match(/\[(?:#\w+ )?([\w\.]+)\/([\w\.]+)\((\d+)%\) CN:(\d+) DL:([\w\.]+) ETA:(\w+)\]/)) {
              d = matches[0], downloaded = matches[1], total = matches[2], progress = matches[3], connections = matches[4], speed = matches[5], eta = matches[6];
              $scope.installing[$scope.app.id].progress = progress;
              $scope.installing[$scope.app.id].label = "" + progress + "% " + speed + "/s";
              return $scope.$digest();
            }
          });
          aria2c.stderr.on('data', function(data) {
            return console.log('err: ', data);
          });
          return aria2c.on('close', function(code) {
            var checksum, downloaded, file;
            if (code !== 0) {
              window.LOCAL_NW.desktopNotifications.notify("TODO://icon", $scope.app.name, "下载失败, 错误: " + code);
              delete $scope.installing[$scope.app.id];
              return $scope.$digest();
            } else {
              $scope.installing[$scope.app.id].progress = 100;
              $scope.installing[$scope.app.id].label = '正在安装';
              $scope.$digest();
              downloaded = "cache/" + (path.basename($scope.app.download.url));
              checksum = crypto.createHash('md5');
              file = fs.ReadStream(downloaded);
              file.on('data', function(d) {
                return checksum.update(d);
              });
              return file.on('end', function() {
                var p;
                if (checksum.digest('hex') !== $scope.app.download.checksum) {
                  window.LOCAL_NW.desktopNotifications.notify("TODO://icon", $scope.app.name, "校验错误");
                  delete $scope.installing[$scope.app.id];
                  return $scope.$digest();
                } else {
                  p = path.join("apps/" + $scope.app.id);
                  return mkdirp(p, function(err) {
                    var p7zip;
                    if (err) {
                      throw err;
                    }
                    console.log(["x", "-y", "-o" + p, downloaded]);
                    console.log(p7zip = child_process.spawn('bin/7za', ["x", "-y", "-o" + p, "cache/" + (path.basename($scope.app.download.url))]));
                    p7zip.stdout.setEncoding('utf8');
                    p7zip.stderr.setEncoding('utf8');
                    p7zip.stdout.on('data', function(data) {
                      return console.log(data);
                    });
                    p7zip.stderr.on('data', function(data) {
                      return console.log('err: ', data);
                    });
                    return p7zip.on('close', function(code) {
                      if (code !== 0) {
                        window.LOCAL_NW.desktopNotifications.notify("TODO://icon", $scope.app.name, "安装失败, 错误: " + code);
                        delete $scope.installing[$scope.app.id];
                        return $scope.$digest();
                      } else {
                        delete $scope.installing[$scope.app.id];
                        window.LOCAL_NW.desktopNotifications.notify("TODO://icon", $scope.app.name, '安装完成');
                        return $scope.add(path.join(p, $scope.app.main));
                      }
                    });
                  });
                }
              });
            }
          });
        });
      };
      return $scope.run = function() {
        console.log($scope.app);
        $scope.app.running = true;
        return child_process.execFile($scope.app.main, {
          cwd: $scope.app.installation
        }, function(error, stdout, stderr) {
          if (error) {
            throw error;
          }
          $scope.app.running = false;
          return $scope.$digest();
        });
      };
    }
  ]);

  if (false) {
    db.remove({}, {
      multi: true
    }, function(err, numRemoved) {
      if (err) {
        throw err;
      }
      return db.insert([
        {
          "id": "th135",
          "category": "game",
          "name": "东方心绮楼",
          "network": {
            "proto": "udp",
            "port": 10800
          },
          "main": "th135.exe",
          "summary": "喵喵喵喵喵帕斯 nyanpass nyanpass",
          "download": {
            "url": "http://test2.my-card.in/downloads/maotama/th135_1.33.7z",
            "size": 313177031,
            "checksum": "ab3c7f4646e080fb88959978865ebf24"
          },
          "main": 'th135.exe',
          "languages": {
            "ja-JP": true,
            "zh-CN": {
              url: "http://test2.my-card.in/downloads/maotama/th135_lang_zh-CN_1.33.7z",
              size: 74749190,
              checksum: "49111c67d941e30384251a2026ba67ba"
            }
          }
        }, {
          "id": "th123",
          "category": "game",
          "name": "东方非想天则",
          "network": {
            "proto": "udp",
            "port": 10800
          },
          "summary": "",
          "download": {
            url: "http://test2.my-card.in/downloads/maotama/th123_1.10a.7z",
            "size": 250272482,
            "checksum": "027a358a7ac014f725ebb8659f1caa6f"
          },
          "main": 'th123.exe',
          "languages": {
            "ja-JP": true
          }
        }
      ], function(err, newDocs) {
        if (err) {
          throw err;
        }
        return console.log(newDocs);
      });
    });
  }

}).call(this);

//# sourceMappingURL=controllers.map
